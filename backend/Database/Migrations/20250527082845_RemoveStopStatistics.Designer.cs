// <auto-generated />
using Database.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(TadeoTDbContext))]
    [Migration("20250527082845_RemoveStopStatistics")]
    partial class RemoveStopStatistics
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Database.Entities.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Database.Entities.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .HasColumnType("MEDIUMBLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("Database.Entities.FeedbackOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FeedbackQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackQuestionId");

                    b.ToTable("FeedbackOptions");
                });

            modelBuilder.Entity("Database.Entities.FeedbackQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MaxRating")
                        .HasColumnType("int");

                    b.Property<int?>("MinRating")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Placeholder")
                        .HasColumnType("longtext");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RatingLabels")
                        .HasColumnType("longtext");

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FeedbackQuestions");
                });

            modelBuilder.Entity("Database.Entities.FeedbackQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FeedbackQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackQuestionId");

                    b.ToTable("FeedbackQuestionAnswers");
                });

            modelBuilder.Entity("Database.Entities.Stop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoomNr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("Database.Entities.StopGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StopGroups");
                });

            modelBuilder.Entity("Database.Entities.StopGroupAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("StopGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StopGroupId");

                    b.HasIndex("StopId");

                    b.ToTable("StopGroupAssignments");
                });

            modelBuilder.Entity("Database.Entities.Student", b =>
                {
                    b.Property<string>("EdufsUsername")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StudentClass")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EdufsUsername");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Database.Entities.StudentAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StopId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("StopId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAssignments");
                });

            modelBuilder.Entity("Database.Entities.Teacher", b =>
                {
                    b.Property<string>("EdufsUsername")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EdufsUsername");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Database.Entities.TeacherAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("StopId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("StopId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherAssignments");
                });

            modelBuilder.Entity("DivisionStop", b =>
                {
                    b.Property<int>("DivisionsId")
                        .HasColumnType("int");

                    b.Property<int>("StopsId")
                        .HasColumnType("int");

                    b.HasKey("DivisionsId", "StopsId");

                    b.HasIndex("StopsId");

                    b.ToTable("DivisionStop");
                });

            modelBuilder.Entity("Database.Entities.FeedbackOption", b =>
                {
                    b.HasOne("Database.Entities.FeedbackQuestion", "FeedbackQuestion")
                        .WithMany("Options")
                        .HasForeignKey("FeedbackQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackQuestion");
                });

            modelBuilder.Entity("Database.Entities.FeedbackQuestionAnswer", b =>
                {
                    b.HasOne("Database.Entities.FeedbackQuestion", "FeedbackQuestion")
                        .WithMany("FeedbackQuestionAnswers")
                        .HasForeignKey("FeedbackQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackQuestion");
                });

            modelBuilder.Entity("Database.Entities.StopGroupAssignment", b =>
                {
                    b.HasOne("Database.Entities.StopGroup", "StopGroup")
                        .WithMany("StopAssignments")
                        .HasForeignKey("StopGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Stop", "Stop")
                        .WithMany("StopGroupAssignments")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stop");

                    b.Navigation("StopGroup");
                });

            modelBuilder.Entity("Database.Entities.StudentAssignment", b =>
                {
                    b.HasOne("Database.Entities.Stop", "Stop")
                        .WithMany("StudentAssignments")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Student", "Student")
                        .WithMany("StudentAssignments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stop");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Database.Entities.TeacherAssignment", b =>
                {
                    b.HasOne("Database.Entities.Stop", "Stop")
                        .WithMany("TeacherAssignments")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Teacher", "Teacher")
                        .WithMany("AssignedStops")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stop");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("DivisionStop", b =>
                {
                    b.HasOne("Database.Entities.Division", null)
                        .WithMany()
                        .HasForeignKey("DivisionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Stop", null)
                        .WithMany()
                        .HasForeignKey("StopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Entities.FeedbackQuestion", b =>
                {
                    b.Navigation("FeedbackQuestionAnswers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Database.Entities.Stop", b =>
                {
                    b.Navigation("StopGroupAssignments");

                    b.Navigation("StudentAssignments");

                    b.Navigation("TeacherAssignments");
                });

            modelBuilder.Entity("Database.Entities.StopGroup", b =>
                {
                    b.Navigation("StopAssignments");
                });

            modelBuilder.Entity("Database.Entities.Student", b =>
                {
                    b.Navigation("StudentAssignments");
                });

            modelBuilder.Entity("Database.Entities.Teacher", b =>
                {
                    b.Navigation("AssignedStops");
                });
#pragma warning restore 612, 618
        }
    }
}
